<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Vars</title>
    <style type="text/css">
<![CDATA[
      @media screen and (prefers-color-scheme: dark) {
        body, textarea {
        background-color: black;
        color: lightgrey;
        }
      }
      @media screen and (prefers-color-scheme: light) {
        body, textarea {
        background-color: white;
        color: black;
        }
      }
]]>
    </style>
    <script type="text/javascript" src="js/fleur.js"></script>
  </head>
  <body>
    <button id="run" onclick="run()">Run</button>
    <br/>
    <textarea id="test" style="height: 150px; width: 1300px" oninput="fclear()">
<![CDATA[
declare variable $x external;

$x
]]>
	</textarea>
    <hr/>
    <textarea id="doc" style="height: 150px; width: 1300px" oninput="fclear()">
<![CDATA[
<chain:chain-game xmlns:chain="http://mansoft.nl/chain" rows="3" columns="3">
    <chain:field row="1" column="1" shape="circle" color="red" state="current"/>
    <chain:field row="1" column="2" shape="square" color="blue" state="unvisited"/>
    <chain:field row="1" column="3" shape="square" color="red" state="unvisited"/>
    <chain:field row="2" column="1" shape="circle" color="blue" state="unvisited"/>
    <chain:field row="2" column="2" shape="square" color="red" state="unvisited"/>
    <chain:field row="2" column="3" shape="circle" color="blue" state="unvisited"/>
    <chain:field row="3" column="1" shape="square" color="blue" state="unvisited"/>
    <chain:field row="3" column="2" shape="circle" color="blue" state="unvisited"/>
    <chain:field row="3" column="3" shape="circle" color="red" state="unvisited"/>
</chain:chain-game>
]]>    
    </textarea>
    <hr/>
    <div id="effectiveresult" style="height: 500px; width: 500px"></div>
    <hr/>
    <pre id="xqueryx"></pre>
    <script type="text/javascript">
<![CDATA[
      function fclear() {
        document.getElementById("effectiveresult").innerHTML = "";
        //alert("clear");
      }
      var xqeval = async function(xexpr, xmldoc, env) {
        try {
          var res = await xmldoc.evaluate(xexpr, null, env);
          var el = res.iterateNext();
          if (el) {
            document.getElementById("effectiveresult").appendChild(el);
          }
        } catch(e) {
        }
      };
      function run() {
        try {
          var domparser = new DOMParser();
          var xmldoc = domparser.parseFromString(document.getElementById("doc").value, "application/xml");
        } catch(e) {
          document.getElementById("xqueryx").innerHTML = "Exception!\n" + e.message + (jsret ? "\n\n" + jsret : "");
        }
			const
				env = {
					args: {
						x: xmldoc
					}
				}
        xqeval(document.getElementById("test").value, xmldoc, env);
      }
]]>
    </script>
  </body>
</html>